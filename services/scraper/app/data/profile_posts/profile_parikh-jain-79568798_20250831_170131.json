{
  "identifier": "parikh-jain-79568798",
  "type": "profile",
  "scraped_at": "2025-08-31T22:31:31.296092+05:30",
  "total_posts": 9,
  "posts": [
    {
      "id": "I invested 3+ hours to create this pattern recogni_1",
      "text": "I invested 3+ hours to create this pattern recognition cheatsheet for DSA and coding interviews. This will help you solve 90% of all DSA problems in interviews (based on my mentoring experience over the last 8+ years) ◄ Array / String Inputs 1. Is the array sorted? → Use Binary Search, Two Pointers, or Prefix Sums 2. Optimization problems (Max/Min/Subarray)? → Think Sliding Window, Dynamic Programming, or Greedy 3. Looking for duplicates / counts / frequencies? → Use HashMap, HashSet, or Counting Array 4. Need substrings or fixed-size subarrays? → Apply Sliding Window with Two Pointers 5. Frequent min/max in window? → Use Monotonic Queue, Deque, or Heap 6. Generating subsets, permutations, combinations? → Use Backtracking 7. Matching / parsing characters? → Use Stack, especially for Balanced Parentheses, Infix/Postfix Most people struggle with DSA because they think they have weak logic. But mostly, it’s because their approach is completely wrong. If you want to solve problems fast and with solid accuracy, you need to think in patterns. Without patterns, you can solve every problem in an interview that you’ve seen once, but once you see a new problem, you will get stuck. One of the best ways to build pattern recognition skills is by using this DSA pattern product I’ve been recommended to 100s of people. Check product here : https://lnkd.in/g94khGEh This product will help you: - help you track and learn the clues and triggers of different patterns - provide AI-based doubt solving + space to add your own notes - solve 250+ good problems with 5 problems each on 50 patterns - train you on every scenario, so you can solve unseen problems. ◄ Graph Inputs 1. Shortest path in unweighted graph? → Use Breadth-First Search (BFS) 2. Weighted shortest path? → Use Dijkstra, Bellman-Ford, or A\\ 3. Connected components / cycle detection? → Use DFS, Union-Find (DSU) 4. Topological ordering? → Use Kahn’s Algorithm or DFS + visited set 5. Optimization like MST? → Use Kruskal or Prim’s Algorithm ◄ Tree Inputs (Often Binary Trees) 1. Traversals? → Use Inorder, Preorder, Postorder, or Level-order (BFS) 2. Balanced checks or diameter calculations? → Use Postorder + height calculations 3. Lowest Common Ancestor? → Use Recursive DFS or Parent Map + Ancestor Set ◄ Linked List Inputs 1. Detecting cycles? → Use Slow and Fast Pointers (Floyd’s Algorithm) 2. Reversals / partial changes? → Use pointer juggling: prev, curr, next 3. Intersection or middle node? → Use Two Pointers ◄ Dynamic Programming Use-Cases 1. Optimal choices / Overlapping subproblems? → Use DP with Memoization (Top Down) or Tabulation (Bottom Up) 2. Subset or knapsack problems? → Use 1D/2D DP Arrays 3. String matching or edits? → Use DP Matrix (e.g., Edit Distance, LCS) Continued below....",
      "likes": 1,
      "comments": 36,
      "reposts": 69,
      "engagement": 106,
      "scraped_at": "2025-08-31T22:31:27.234863+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "You're not so dumb that you can’t crack the coding_329",
      "text": "You're not so dumb that you can’t crack the coding interviews at Microsoft, Amazon, or Google. You just never corrected your approach even after multiple rejections. You're not so dull that you can’t learn DSA and make it your strength. You just never came across the right way to learn it. You're not so foolish that you shouldn’t dream of an SDE-1 role at a FAANG company. You’re just lacking the right plan, and I’ll help you build one. You see, there are 4 levels to DSA prep, and most people stop at Level 0, then wonder why nothing's working. Let me explain: 🔹 Level 0 — Random Work You feel busy, but there’s no direction. 🔹 Level 1 — Pattern Awareness. You realize every problem is a variation of something you’ve seen before. 🔹 Level 2 — Pattern Recognition under pressure In a timed test, you don’t panic and can easily spot patterns in problems 🔹 Level 3 — Speed + Clarity You solve 1–2 medium-hard problems in under 45 minutes. This is where pattern-based learning matters most. You don’t need to solve 500 questions. You need to solve 250–300 in the right way. One of the best ways to build pattern recognition skills is by using this DSA pattern product I’ve been recommending to people (this is based on my experience from the last 8+ years) Check product here : https://lnkd.in/g94khGEh This product will help you: - help you track and learn the clues and triggers of different patterns - provide AI-based doubt solving + space to add your own notes - solve 250+ good problems with 5 problems each on 50 patterns - train you on every scenario, so you can solve unseen problems. Stop doing blind preparation, go with a strategy, it will change your life.",
      "likes": 329,
      "comments": 19,
      "reposts": 0,
      "engagement": 348,
      "scraped_at": "2025-08-31T22:31:28.048247+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "From leaving TCS in Jan 2025… to landing an SDE-1 _1",
      "text": "From leaving TCS in Jan 2025… to landing an SDE-1 (L59) offer from Microsoft India in April 2025… This is the story of one of my mentees. (He’s asked me not to tag him, but I’m sharing his full DSA + LeetCode strategy because his approach fixed what most candidates get wrong.) Most students struggle with DSA, not because their logic is weak… but because their approach is broken. ✅ Step 1: Choose Your Language Based on Speed Don’t waste time debating Java vs C++ vs Python. Pick what you’re fastest at when stressed. Tip: If you’re solving string-heavy questions, Python will save time. ✅ Step 2: Learn Pattern-Wise This was the biggest game-changer. Instead of solving problems randomly, he studied DSA patterns. → Sliding Window → Two Pointers → Hashing → Recursion + DP → Backtracking → Binary Search on Answers → Monotonic Stack / Queue Every new question became easier to recognize, not just solve. 👉 Here’s my pattern-based learning guide he followed: https://lnkd.in/g94khGEh This guide will basically: - help you track and learn the clues and triggers of different patterns - provide AI-based doubt solving + space to add your own notes - solve 250+ good problems with 5 problems each on 50 patterns - train you on every scenario, so you can solve unseen problems. ✅ Step 3: Get Solid on Time + Space You’re expected to: Estimate time/space complexity fast Start with brute force, then optimize Know tradeoffs (code clarity vs performance) 📌 Before interviews, revise: Time/space of all core data structures Big-O notations (keep a printed cheat sheet) ✅ Step 4: Master the Fundamentals First Don’t rush to DP or Graphs if your basics aren’t solid. He spent his first 4 weeks on: — Arrays — LinkedLists — HashMaps — Stack/Queue operations — Custom implementations like LRU Cache, HashMap 📌 These showed up in his interviews at Microsoft. ✅ Step 5: Use a Clear, Ordered Roadmap His DSA roadmap looked like this: 1. Arrays, LinkedLists, HashMaps 2. Searching + Sorting 3. Trees (Pre, In, Post order) 4. Graphs, Heaps, Backtracking 5. Recursion 6. DP, Tries, Union-Find He didn’t jump between 10s of DSA sheets out there ✅ Step 6: Practice With Depth — 10 problems done deeply >> 50 done shallowly — Always ask: “What pattern does this question follow?” Examples: Max sum of subarray? → Sliding Window Repeated sub-problems? → Try Recursion → then DP Multiple paths? → Backtracking ✅ Step 7: Interview Like a Problem Solver — Start with brute force — Explain your thinking out loud — Clarify the question before writing code — Know your edge cases (nulls, empty inputs, one element) Your goal isn’t to become a LeetCode machine. It’s to become the person who knows how to think, debug, and deliver when it matters. And that’s what this offer from Microsoft proved.",
      "likes": 1,
      "comments": 24,
      "reposts": 19,
      "engagement": 44,
      "scraped_at": "2025-08-31T22:31:28.511167+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "Stop wasting 2 years preparing for coding and DSA-_226",
      "text": "Stop wasting 2 years preparing for coding and DSA-based interviews. It’s Dumb. Stop hopping random sheets, problem lists, and articles on Leetcode. It’s Dumb. Stop trying to pick every resource you find on YT, LinkedIn, Internet. It’s Dumb. You can realistically prepare for DSA-based interviews between 8-12 months, do it by adopting this habit: Focusing on DSA patterns. You know why? Amazon won’t care how many years you spent learning DSA. Google won’t ask if you’re a Leetcode night or a guardian. Microsoft won’t even check your contest badges. They will hand you 2 questions (Medium-Hard) difficulty. If you clear it, you move on. If not, you’re stuck for 12 months like 90% of the rest of the candidates who worked hard but didn’t stop to check their strategy. Why do you think everyone is talking about DSA patterns today? - you break down questions faster because you spot the pattern instantly, - you solve even new questions because you’ve trained for the clues - you never panic because you’ve done this 1000s of times - you go into interviews with genuine confidence You don’t even need to know system design for SDE-1 roles, just knowing and mastering DSA will get you in the interview room and I know so many people who just needed that chance. If you ask me, one of the best ways to build pattern recognition skills is by using this DSA pattern product I’ve been recommending to people (literally 100s of students) Check product here: https://lnkd.in/g94khGEh This product will help you: - help you track and learn the clues and triggers of different patterns - provide AI-based doubt solving + space to add your own notes - solve 250+ good problems with 5 problems each on 50 patterns - train you on every scenario, so you can solve unseen problems. If you already know the basics, have spent good time on DSA. Chances are you just need to change your strategy to finally make the leap you’ve been waiting for.",
      "likes": 226,
      "comments": 15,
      "reposts": 3,
      "engagement": 244,
      "scraped_at": "2025-08-31T22:31:28.874228+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "You can spot 90% of the DSA patterns in Leetcode q_813",
      "text": "You can spot 90% of the DSA patterns in Leetcode questions with this DSA patterns identification cheatsheet. It will help you identify which questions will be solved by which pattern based on keywords. I wish I had this when I was grinding Leetcode and preparing for my Amazon myself. → Two Pointers ◘ opposite ends ◘ merging intervals ◘ skipping duplicates ◘ partitioning array → Sliding Window ◘ minimum length ◘ longest unique ◘ at most/at least K ◘ replace/transform window → Binary Search ◘ find boundary ◘ peak element ◘ rotated array ◘ kth smallest/largest ►— If you want to solve problems fast and with solid accuracy, you need to think in patterns. Without patterns, you can solve every problem in an interview that you’ve seen once, but once you see a new problem, you will get stuck. That’s why I’ve put together this DSA Pattern Sheet, which helps you: ✅ identify key patterns and learn when to apply them. ✅ understand scenarios and clues that signal which approach to use. ✅ practice with 5-6 leetcode problems per pattern to solidify learning. ✅ cover 250-300 essential problems, ensuring you master every core concept. ✅ customize the sheet to track progress and adapt it to your needs. Get the sheet here: https://shorturl.at/UwUul —◄ → Fast & Slow Pointers ◘ cycle start node ◘ repeated number ◘ palindrome check ◘ intersection node → Breadth-First Search (BFS) ◘ minimum steps ◘ multi-source ◘ zigzag/spiral ◘ expand frontier → Depth-First Search (DFS) ◘ enumerate all paths ◘ subtree sum ◘ postorder processing ◘ coloring/marking → Backtracking ◘ valid arrangements ◘ decision tree ◘ partial solution ◘ pruning/boundary check → Dynamic Programming ◘ optimal substructure ◘ table filling ◘ count ways ◘ partitioning problem → Greedy ◘ interval scheduling ◘ earliest/latest deadline ◘ minimum jumps/coins ◘ lexicographical choice → Hashing / Hash Table ◘ group anagrams ◘ detect duplicates ◘ count pairs ◘ custom key mapping → Union Find (Disjoint Set) ◘ number of islands ◘ friend circles ◘ redundant connection ◘ find root → Topological Sort ◘ course ordering ◘ dependency resolution ◘ prerequisites ◘ cycle in directed graph → Trie ◘ word break ◘ longest prefix ◘ search suggestions ◘ word replacement → Heap / Priority Queue ◘ running median ◘ merge k sorted ◘ reorder tasks ◘ smallest/largest in stream",
      "likes": 813,
      "comments": 21,
      "reposts": 58,
      "engagement": 892,
      "scraped_at": "2025-08-31T22:31:29.154742+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "Microsoft pays around 20–35 LPA for SDE-1, and wil_220",
      "text": "Microsoft pays around 20–35 LPA for SDE-1, and will always start your process with a DSA round before anything else. Amazon pays around 20–40 LPA for SDE-1, and yes, your first step is always a DSA screening round. Uber, Stripe, and Google all offer between 25-45 LPA for SDE-1. They, too, use a DSA round as the gatekeeper for interviews. Entry to every top company starts with a simple filter: A 45–60 minute DSA round where you solve 2–3 coding problems. That’s it. 90% of the coding interviews my mentees have given in the last 5 years… …have revolved around just these patterns and themes of problems. If you’re preparing for FAANG+ interviews, this is the MUST-SOLVE LIST. But before you start grinding these patterns without a plan, do check out my DSA pattern product I launched recently: https://shorturl.at/UwUul Because problems don’t come with pattern tags, this product will help you: - help you track and learn the clues and triggers of diff, patterns - provide AI-based doubt solving + space to add your own notes - solve 250+ good problems with 5 problems each on every pattern - train you on every scenario, so you can solve unseen problems. Back to the patterns list, here it is: 1. Two Pointers 2. Sliding Window 3. Prefix Sums 4. Merge Intervals 5. Binary Search (and Variants) 6. Sorting-Based Patterns 7. Fast and Slow Pointers 8. Backtracking & Recursive Search 9. Divide and Conquer 10. Linked List Techniques (Dummy Node, In-place Reversal) 11. Stacks and Queues 12. Monotonic Stack / Queue 13. Expression Evaluation (Two Stacks) 14. String Manipulation & Regular Expressions 15. Hashmaps & Frequency Counting 16. Binary Trees & BSTs (Traversal, Construction, Properties) 17. Path Sum & Root-to-Leaf Techniques 18. Kth Largest/Smallest Elements (Heaps / QuickSelect) 19. Top K Frequent Elements 20. Merge K Sorted Lists 21. Dynamic Programming (Including Knapsack, Range DP, etc.) 22. Greedy & Interval Partitioning 23. Graph Traversals (BFS, DFS) 24. Graph Algorithms (DAGs, MSTs, Shortest Paths, etc.) 25. Design Problems (LRU Cache, Twitter, etc.)",
      "likes": 220,
      "comments": 11,
      "reposts": 4,
      "engagement": 235,
      "scraped_at": "2025-08-31T22:31:29.467379+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "1. “Mujhe coding improve karni hai” bolke saal nik_235",
      "text": "1. “Mujhe coding improve karni hai” bolke saal nikal jayega, lekin agar tum decide karo ki “Roz 2 DSA problems solve karunga aur 5 mahine mein interviews clear karunga,” tabhi real growth dikhegi. 2. Har engineering student bolta hai “Project banana hai,” par jab tum deadline set karte ho, “60 din mein khud ka project complete karna hai, chahe weekends hi kyu na lagein,” tab output dikhne lagta hai. 3. “Framework seekhna hai” sabke plans mein hota hai, par jab tum fix karte ho “30 din sirf React pe, daily ek feature build karunga,” tab tujhe khud bhi apni progress dikhegi. 4. “LeetCode karna hai” har dusra banda bolta hai, lekin “Semester khatam hone se pehle 200 questions crack karne hain, roz routine set karunga”, yeh discipline success dilata hai. 5. “Placement ki taiyari karni hai” vague hai, par “2 mahine mein DS, Algo, OS revise karunga aur har week mock interview dunga”, yeh aapke offers decide karte hain. 7. “Automation seekhna hai” kehna cool hai, par jab tum plan banate ho, “Next 2 months mein apne daily tasks automate karke ek real workflow banaunga”, tab productivity genuinely badh jaati hai. 8. “Internship chahiye” bolna aasaan hai, lekin “December tak paid internship crack karni hai, har week 5 tailored applications bhejunga aur har rejection se seekh ke strategy tweak karunga”, isse result aata hai, baaki sab hawa hai. Dost, jab tak tum time aur target set nahi karoge, tab tak result sirf sapne mein hi milega. Yehi farq hai “sochne wale” aur “karne wale” mein. Aaj se vague goals bhool jao, Apna deadline set karo, commit karo Phir dekho, output apne aap aayega. Human mind will take 10 years if you give it 10 years par apne pass itna time nhi hai. Make yourself understand ki mere pass itna hi time and isi time mein mujhe: - apne dreams pore karne hai - maa and papa ke chehre pe smiles lani hai - wo sab karna hai jo kabhi karne ka mauka mila nhi To dekho phir, make it the battle of your life, become a warrior phir motivation jaise cheezein nhi lagti bas tum relentess kaam karte ho. Aur dost yahi pharak hai kar jane wale mein aur sir sochne wale mein.",
      "likes": 235,
      "comments": 14,
      "reposts": 5,
      "engagement": 254,
      "scraped_at": "2025-08-31T22:31:29.756424+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "Go to Microsoft for SDE-1, they will give you 45 m_193",
      "text": "Go to Microsoft for SDE-1, they will give you 45 mins + 2 Medium LC & you will have a 35+ LPA offer on the line Go to Google for SWE-1, they will give you 60 mins + 1 Hard + 1 Medium LC & you will have a 40+ LPA offer on the line Go to Amazon, Atlassian, Meta, Uber, all of these companies like to squeeze the candidate with pressure, and they expect you to perform well. I’ve seen that 90-95% candidates trip up in the 1st round itself, because there is so little time and so much pressure, if you’re not making use of every minute right, you’re bound to fail. So, how do others deal with the pressure? In fact, how did I deal with it? The answer is DSA patterns. Most students struggle with DSA because their whole approach is off. A person who does pattern-based learning >>> will always win when compared to one who doesn’t because: - they will know what the theme of the problem is in 3 mins - In the next 15 mins, they would’ve already mapped out a solution - by the end of the interview, they would’ve passed with flying colors and solved 2 Hard/Medium problems And all of that without panic, or going blank, thinking what this problem is even though they’ve never seen it before. One of the best ways I can recommend to build pattern recognition is to use this DSA pattern product. I’ve recommended it to 1000+ students. - help you track and learn DSA patterns at your own pace - provide AI-based doubt solving + space to add your own notes - 250+ problems with 5 problems each on every pattern - give you every clue and scenario for every DSA pattern Check the product here: https://shorturl.at/UwUul You'll be surprised how quickly things change when you stop grinding random problems and start thinking in patterns.",
      "likes": 193,
      "comments": 11,
      "reposts": 8,
      "engagement": 212,
      "scraped_at": "2025-08-31T22:31:30.066635+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    },
    {
      "id": "If you interview for an SDE-1 role at Amazon, they_63",
      "text": "If you interview for an SDE-1 role at Amazon, they will ask you to solve 1 Medium + 1 Hard LC in just 45 minutes. If you interview at Google, Microsoft, they will also ask you to solve 1 Medium + 1 Hard LC in just 45 minutes. At any company you interview today, excluding startups: No matter how many problems you've solved. No matter how good you are, you might be the most talented in that pool of candidates. All that matters to the interviewer in that moment of the first coding round is: → How fast you identify the pattern → How well you optimize → How clearly you explain under pressure That's why strong DSA is the best equalizer. You don’t need system design for SDE-1 roles. You can get in with just awesome DSA skills. But that's where most candidates fail, and honestly, it’s a simple fix. DSA patterns help you: → stop getting stuck and losing hope midway → solve faster because you don’t reinvent the wheel → spot solutions even for unseen problems → build confidence on yourself and in your skills. That’s why you should check this DSA pattern product I’ve recommended to 100s of people. - help you track and learn DSA patterns at your own pace - provide AI-based doubt solving + space to add your own notes - 250+ problems with 5 problems each on every pattern - give you every clue and scenario for every DSA pattern Check the product here: https://shorturl.at/UwUul You'll be surprised how quickly things change when you stop grinding random problems and start thinking in patterns.",
      "likes": 63,
      "comments": 3,
      "reposts": 2,
      "engagement": 68,
      "scraped_at": "2025-08-31T22:31:30.309420+05:30",
      "source": "profile",
      "profile_url": "https://www.linkedin.com/in/parikh-jain-79568798/"
    }
  ]
}